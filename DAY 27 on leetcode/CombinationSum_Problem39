class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target){
        vector<vector<int>> result;
        std::sort(candidates.begin(), candidates.end());
        dfs(candidates, target, vector<int>{}, 0, result);
        return result;
    }

    void dfs(const vector<int> &candidates, int target, vector<int> curr, size_t index, vector<vector<int>> &result){
        if (target == 0) {
            result.emplace_back(curr);
            return;
        }
        
        for (auto i = index; i < candidates.size(); ++i) {
            if (candidates[i] <= target) {
                curr.emplace_back(candidates[i]);
                dfs(candidates, target - candidates[i], curr, i, result);
                curr.pop_back();
            } 
            else 
                break; 
        }
    }
};
