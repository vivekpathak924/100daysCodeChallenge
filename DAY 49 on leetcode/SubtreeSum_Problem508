# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findFrequentTreeSum(self, root):
      
        def dfs(node):

            if not node:
                return 0
            left_sum = dfs(node.left)
            right_sum = dfs(node.right)
            subtree_sum = node.val + left_sum + right_sum
            subtree_sum_counter[subtree_sum] += 1
            return subtree_sum

        subtree_sum_counter = Counter()
        dfs(root)
        max_frequency = max(subtree_sum_counter.values())
        return [subtree_sum for subtree_sum, frequency in subtree_sum_counter.items() if frequency == max_frequency]
        """
        :type root: TreeNode
        :rtype: List[int]
        """
